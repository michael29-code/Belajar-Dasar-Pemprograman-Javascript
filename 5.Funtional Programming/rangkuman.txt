Functional Programming

Functional Programming adalah paradigma pemrograman di mana proses komputasi didasarkan pada fungsi matematika murni. 

imperatif

const names = ['Harry', 'Ron', 'Jeff', 'Thomas'];

const newNamesWithExcMark = [];

for(let i = 0; i < names.length; i++) {
  newNamesWithExcMark.push(`${names[i]}!`);
}

console.log(newNamesWithExcMark);

/* output:
   [ 'Harry!', 'Ron!', 'Jeff!', 'Thomas!' ]
*/

Deklaratif

const names = ['Harry', 'Ron', 'Jeff', 'Thomas'];

const newNamesWithExcMark = names.map((name) => `${name}!`);

console.log(newNamesWithExcMark);

/* output:
 * [ 'Harry!', 'Ron!', 'Jeff!', 'Thomas!' ]
 */

 Dengan menggunakan cara deklaratif kodingan menjadi ringksan dan mudah dipahami


 Konsep" Functional Programming
 Pure function, Immutability, dan High-order function

 Pure Function merupakan konsep dari pembuatan fungsi yang mengharuskan fungsi untuk tidak bergantung terhadap nilai yang berada di luar fungsi atau parameternya. Sehingga mau seperti apa keadaanya, fungsi yang dibuat selalu menghasilkan sesuatu yang sama, terkecuali bila fungsi tersebut diberikan nilai parameter yang berbeda.


 impure function merupakan kebalikan dari pure function 
 contohnya 

    let PI = 3.14;

    const hitungLuasLingkaran = (jariJari) => {
    return PI * (jariJari * jariJari); 
    }

    console.log(hitungLuasLingkaran(4)); // 50.24

    PI = 5; // tidak sengaja nilai PI berubah

    console.log(hitungLuasLingkaran(4)); // 80

cara mengubah impure menjadi pure

    const hitungLuasLingkaran = (jariJari) => {
    return 3.14 * (jariJari * jariJari); 
    }

    console.log(hitungLuasLingkaran(4)); // 50.24
    console.log(hitungLuasLingkaran(4)); // 50.24
    console.log(hitungLuasLingkaran(8)); // 200.96
    console.log(hitungLuasLingkaran(8)); // 200.96


    pure function dilarang untuk bergantung terhadap nilai luar, pure function juga dilarang keras untuk mengubah nilai yang berada di luar baik secara sengaja atau tidak sengaja. Pure function tidak boleh menimbulkan efek samping (no side effect) ketika digunakan.


    impure 
    const createPersonWithAge = (age, person) => {
    person.age = age;
    return person;
    };

    const person = {
    name: 'Bobo'
    };

    const newPerson = createPersonWithAge(18, person);

    console.log({
    person,
    newPerson
    });

    /**
    * Output:
    *  {
        person: { name: 'Bobo', age: 18 },
        newPerson: { name: 'Bobo', age: 18 }
        }
    */

    menjadi pure

    const createPersonWithAge = (age, person) => {
    return { ...person, age };
    };

    const person = {
    name: 'Bobo'
    };

    const newPerson = createPersonWithAge(18, person);

    console.log({
    person,
    newPerson
    });

    /**
    * Output:
    *  { 
    *    person: { name: 'Bobo' },
    *    newPerson: { name: 'Bobo', age: 18 } 
    *  }
    */

    3 konsep agar mengetahui function sudah pure atau belum 
    Mengembalikan nilai yang sama bila inputannya (nilai parameter) sama.
    Hanya bergantung pada argumen yang diberikan.
    Tidak menimbulkan efek samping.


    Immutability

    Immutable berarti sebuah objek tidak boleh diubah setelah objek tersebut dibuat. Kontras dengan mutable yang artinya objek boleh diubah setelah objek tersebut dibuat.


    const user = {
        firstname: 'Harry',
        lastName: 'Protter', // ups, typo!
    }

    const createUserWithNewLastName = (newLastName, user) => {
        return { ...user, lastName: newLastName }
    }

    const newUser = createUserWithNewLastName('Potter', user);

    console.log(newUser);

    /**
    * output:
    * { firstname: 'Harry', lastName: 'Potter' }
    * 
    */

    Higher-Order Function

    JavaScript memiliki kemampuan First Class Functions, fungsi pada JavaScript dapat diperlakukan layaknya sebuah data. Kita bisa menyimpan function dalam variabel, memberikan function sebagai parameter pada fungsi lainnya, hingga mengembalikan function di dalam function.

    const hello = () => {
    console.log('Hello!')
    };

    const say = (someFunction) => {
    someFunction();
    }

    const sayHello = () => {
        return () => {
            console.log('Hello!');
        }
    }

    hello();
    say(hello);
    sayHello()();

    /**
    * Hello!
    * Hello!
    * Hello!
    */

    Higher-Order Function merupakan fungsi yang dapat menerima fungsi lainnya pada argumen; mengembalikan sebuah fungsi; atau bahkan keduanya.

    Teknik Higher-Order Function biasanya digunakan untuk:

    Mengabstraksi atau mengisolasi sebuah aksi, event, atau menangani alur asynchronous menggunakan callback, promise, dan lainnya.
    Membuat utilities yang dapat digunakan diberbagai tipe data.
    Membuat teknik currying atau function composition.


    Array map() merupakan salah satu contoh Higher-Order Function yang ada di JavaScript. Karena dalam penggunaanya, ia menerima satu buah argumen yang merupakan sebuah function.

    kita bisa memmbuat fungsi map() sesuai versu  kita

    const names = ['Harry', 'Ron', 'Jeff', 'Thomas'];

    const arrayMap = (array, fn) => {
        const newArray = [];
        
        for(let i = 0; i < array.length; i++) {
            newArray.push(fn(array[i]));
        }
        
        return newArray;
    }

    const newNames = arrayMap(names, (name) => `${name}!` );

    console.log({
        names,
        newNames,
    });

    /**
    * output:
    * {
    *   names: [ 'Harry', 'Ron', 'Jeff', 'Thomas' ],
    *   newNames: [ 'Harry!', 'Ron!', 'Jeff!', 'Thomas!' ]
    * }
    */


    Reusable Function

    Array Map
    Fungsi array.map() merupakan fungsi bawaan dari array yang sangat berguna dan banyak sekali digunakan. Fungsi ini dapat dipanggil dari sebuah data bertipe array dan menerima satu buah callback function.

    const newArray = ['Harry', 'Ron', 'Jeff', 'Thomas'].map((name) => { return `${name}!`});

    console.log(newArray);

    /**
    * [ 'Harry!', 'Ron!', 'Jeff!', 'Thomas!' ]
    * 
    */

    Array Filter
    array.filter() merupakan fungsi bawaan dari data yang bertipe array di JavaScript. Sesuai namanya, fungsi ini sangat berguna untuk melakukan proses penyaringan (filtering) terhadap nilai array yang ada.

    const truthyArray = [1, '', 'Hallo', 0, null, 'Harry', 14].filter((item) => Boolean(item));

    console.log(truthyArray);

    /**
    * output:
    * [ 1, 'Hallo', 'Harry', 14 ]
    * 
    */

    contoh lain filter

    const students = [
    {
        name: 'Harry',
        score: 60,
    },
    {
        name: 'James',
        score: 88,
    },
    {
        name: 'Ron',
        score: 90,
    },
    {
        name: 'Bethy',
        score: 75,
    }
    ];

    const eligibleForScholarshipStudents = students.filter((student) => student.score > 85);

    console.log(eligibleForScholarshipStudents);

    /**
    * output:
    * [ { name: 'James', score: 88 }, { name: 'Ron', score: 90 } ]
    * 
    */
 

    Array forEach

    Array forEach merupakan fungsi bawaan dari array yang berfungsi untuk memanggil fungsi callback pada setiap iterasi index array. fungsi ini tidak mengembalikan nilai apa pun.


    imperatif
    const names = ['Harry', 'Ron', 'Jeff', 'Thomas'];
    
    for(let i = 0; i < names.length; i++) {
    console.log(`Hello, ${names[i]}!`);
    }
    
    /**
    * output:
    * Hello, Harry!
    * Hello, Ron!
    * Hello, Jeff!
    * Hello, Thomas!
    * 
    */

    Declaratif

    const names = ['Harry', 'Ron', 'Jeff', 'Thomas'];
 
    names.forEach((name) => {
    console.log(`Hello, ${name}`);
    });
    
    /**
    * output:
    * Hello, Harry!
    * Hello, Ron!
    * Hello, Jeff!
    * Hello, Thomas!
    * 
    */

    ketika menggunakan forEach, kita tidak bisa menggunakan operator break atau continue pada proses perulangan (Anda bisa melakukannya pada perulangan for). Hal ini juga berlaku ketika pada fungsi map dan filter.


    const names = ['Harry', 'Ron', 'Jeff', 'Thomas'];
 
    for(let i = 0; i < names.length; i++) {
    if(names[i] === 'Jeff') continue; // Bisa!
    
    console.log(`Hello, ${names[i]}!`);
    }
    
    names.forEach((name) => {
    if(names[i] === 'Jeff') continue; // Tidak Bisa!
    console.log(`Hello, ${name}`);
    });


 const books = [
  { title: 'The Da Vinci Code', author: 'Dan Brown', sales: 5094805 },
  { title: 'The Ghost', author: 'Robert Harris', sales: 807311 },
  { title: 'White Teeth', author: 'Zadie Smith', sales: 815586 },
  { title: 'Fifty Shades of Grey', author: 'E. L. James', sales: 3758936 },
  { title: 'Jamie\'s Italy', author: 'Jamie Oliver', sales: 906968 },
  { title: 'I Can Make You Thin', author: 'Paul McKenna', sales: 905086 },
  { title: 'Harry Potter and the Deathly Hallows', author: 'J.K Rowling', sales: 4475152 },
];

// TODO

 const greatAuthors = books.filter(book=> book.sales >= 1000000).map(book => `${book.author} adalah penulis buku ${book.title} yang sangat hebat!`);
console.log(greatAuthors);