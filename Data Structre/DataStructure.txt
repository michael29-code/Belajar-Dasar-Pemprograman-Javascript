Jenis struktur data 

Object
Array
Map
Set

Object

Untuk menetapkan objek pada sebuah variabel dapat menggunakan tanda kurung kurawal {}.

const user = {};

Object berisi key dan value. value juga sering disebut dengan property. Key berperan seperti  variabel yang menyimpan sebuah nilai. Sementara, value berisi nilai dengan tipe data   termasuk objek lain. 

cth 
let object = {key1: "value1", key2: "value2", key3: "value3"}

key harus string dan ditulis sebelum  titik dua (:) lalu value

const karakter = {
    nama : "michael",
    umur : 17 ,
    spesies : "manusia",
    hobi :"olahraga",
}

tanda koma diakhir optional, digunakan untuk memudahkan pada saat menambah, mengubah atau memindahkan


untuk mengakses nilai dari properti object,  dapat memanggil nama object lalu tanda titik dan diikuti nama propertinya.

cth

const karakter = {
    nama : "michael",
    umur : 17 ,
    spesies : "manusia",
    hobi :"olahraga",
}

console.log(` nama saya ${karakter.nama}`);
console.log(` umur saya ${karakter.umur}`);

/* output
nama saya michael
umur saya 17
*/

Selain dot operator, kita juga bisa mengakses properti dari object menggunakan bracket atau tanda kurung siku.

user[“home world”];

const user = {
    firstName: "Bambang",
    lastName: "Ganteng",
    age: 17,
    "home world": "Bandung"
};
console.log(`Halo, nama saya ${user.firstName} ${user.lastName}`);
console.log(`Umur saya ${user.age} tahun`);
console.log(`Saya berasal dari ${user["home world"]}`);
/* output
Halo, nama saya Bambang Ganteng
Umur saya 17 tahun
Saya berasal dari Bandung
*/



menambah atau memodifikasi object

const kapal = {
    name: "Titanic",
    manufacturer: "Harland and Wolff shipyard",
    maxSpeed: 22,
    color: "black"
};

kapal.color = "black and white";
kapal["maxSpeed"] = 23;
console.log(kapal);

/* output
{
  name: 'Titanic',
  manufacturer: 'Harland and Wolff shipyard',
  maxSpeed: 23,
  color: 'black and white'
}
 */


mengubah nilai berbeda dengan menginisialisasi ulang nilai itulah kenapa program diatas tidak error padahal menggunakan const

kita dapat menghapus property menggunakan delete

const kapal = {
    name: "Titanic",
    manufacturer: "Harland and Wolff shipyard",
    maxSpeed: 22,
    color: "black"
};

kapal.color = "black and white";
kapal["maxSpeed"] = 23;

delete kapal.manufacturer;

console.log(kapal);

/* output
{
  name: 'Titanic',
  maxSpeed: 23,
  color: 'black and white'
}
 */


 Array
 Array merupakan tipe data yang dapat mengelompokkan lebih dari satu nilai dan menempatkannya dalam satu variabel. 

 cth
let myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
console.log(myArray);

/* output:
[ 'Hijau', 12.5, 17, true, 'Ngoding' ]
*/

Perbedaan array dengan object adalah data pada array disusun secara berurutan dan diakses menggunakan index. Untuk mengakses nilai di dalam array, kita gunakan tanda kurung siku [] yang di dalamnya berisi angka yang merupakan posisi nilai yang ingin diakses.

cara mengaksesnya 

console.log(myArray[1]);

/* output:
12.5
*/

kenapa 12.5 karena index dimulai dari 0

Jika kita mengakses nilai array lebih dari index-nya, maka hasilnya akan undefined 
Index terakhir array selalu jumlah nilai array - 1.

let myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
console.log(myArray[0]);
console.log(myArray[1]);
console.log(myArray[2]);
console.log(myArray[3]);
console.log(myArray[4]);
console.log(myArray[5]);
console.log("Panjang nilai myArray adalah " + myArray.length + ".");
/* output:
Hijau
12.5
17
true
Ngoding
undefined
Panjang nilai Myarray adalah 5.
*/


Menambahkan data ke dalam array dapat menggunakan push()
let myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.push('Javascript');
console.log(myArray);

/* output
[ 'Hijau', 12.5, 17, true, 'Ngoding', 'Javascript' ]
*/

untuk mengeluarkan data atau elemen terakhir dari array pop()

const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.pop();
console.log(myArray);

/* output
[ 'Hijau', 12.5, 17, true ]
*/

shift() dan unshift()
Metode shift() digunakan untuk mengeluarkan elemen pertama dari array, sementara unshift() digunakan untuk menambahkan elemen di awal array.
contoh
const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.shift();
myArray.unshift("Mangga");
console.log(myArray);

/* output
[ 'Mangga', 12.5, 17, true ]
*/

untuk menghapus data menggunakan delete
const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
delete.myArray[1];
console.log(myArray);

/* output
[ 'Hijau', <1 empty item>, 17, true , 'Ngoding']
*/

Untuk menghapus elemen, gunakan metode splice()

const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.splice(2, 1);   // Menghapus dari index 2 sebanyak 1 elemen
console.log(myArray);

/* output
[ 'Hijau', 17, true , 'Ngoding']
*/


Speard operator (es6)
Digunakan untuk menyebarkan nilai array atau lebih tepatnya iterable object menjadi beberapa elemen. Spread operator dituliskan dengan tiga titik (...).

const favorites = ["Seafood", "Salad", "Nugget", "Soup"];

console.log(...favorites);

/* output
Seafood Salad Nugget Soup
*/

penjelasan

console.log(...favorites);

Sama seperti kita menuliskan kode  ini

console.log(favorites[0], favorites[1], favorites[2], favorites[3]);

menggabungkan 2 nilai array 

const favorites = ["Seafood", "Salad", "Nugget", "Soup"];
const others = ["Cake", "Pie", "Donut"];

const allFavorites = [...favorites, ...others];

console.log(allFavorites);

/* output
[ 'Seafood', 'Salad', 'Nugget', 'Soup', 'Cake', 'Pie', 'Donut' ]
*/



Destructuring Object & Array