Jenis struktur data 

Object
Array
Map
Set

Object

Untuk menetapkan objek pada sebuah variabel dapat menggunakan tanda kurung kurawal {}.

const user = {};

Object berisi key dan value. value juga sering disebut dengan property. Key berperan seperti  variabel yang menyimpan sebuah nilai. Sementara, value berisi nilai dengan tipe data   termasuk objek lain. 

cth 
let object = {key1: "value1", key2: "value2", key3: "value3"}

key harus string dan ditulis sebelum  titik dua (:) lalu value

const karakter = {
    nama : "michael",
    umur : 17 ,
    spesies : "manusia",
    hobi :"olahraga",
}

tanda koma diakhir optional, digunakan untuk memudahkan pada saat menambah, mengubah atau memindahkan


untuk mengakses nilai dari properti object,  dapat memanggil nama object lalu tanda titik dan diikuti nama propertinya.

cth

const karakter = {
    nama : "michael",
    umur : 17 ,
    spesies : "manusia",
    hobi :"olahraga",
}

console.log(` nama saya ${karakter.nama}`);
console.log(` umur saya ${karakter.umur}`);

/* output
nama saya michael
umur saya 17
*/

Selain dot operator, kita juga bisa mengakses properti dari object menggunakan bracket atau tanda kurung siku.

user[“home world”];

const user = {
    firstName: "Bambang",
    lastName: "Ganteng",
    age: 17,
    "home world": "Bandung"
};
console.log(`Halo, nama saya ${user.firstName} ${user.lastName}`);
console.log(`Umur saya ${user.age} tahun`);
console.log(`Saya berasal dari ${user["home world"]}`);
/* output
Halo, nama saya Bambang Ganteng
Umur saya 17 tahun
Saya berasal dari Bandung
*/



menambah atau memodifikasi object

const kapal = {
    name: "Titanic",
    manufacturer: "Harland and Wolff shipyard",
    maxSpeed: 22,
    color: "black"
};

kapal.color = "black and white";
kapal["maxSpeed"] = 23;
console.log(kapal);

/* output
{
  name: 'Titanic',
  manufacturer: 'Harland and Wolff shipyard',
  maxSpeed: 23,
  color: 'black and white'
}
 */


mengubah nilai berbeda dengan menginisialisasi ulang nilai itulah kenapa program diatas tidak error padahal menggunakan const

kita dapat menghapus property menggunakan delete

const kapal = {
    name: "Titanic",
    manufacturer: "Harland and Wolff shipyard",
    maxSpeed: 22,
    color: "black"
};

kapal.color = "black and white";
kapal["maxSpeed"] = 23;

delete kapal.manufacturer;

console.log(kapal);

/* output
{
  name: 'Titanic',
  maxSpeed: 23,
  color: 'black and white'
}
 */


 Array
 Array merupakan tipe data yang dapat mengelompokkan lebih dari satu nilai dan menempatkannya dalam satu variabel. 

 cth
let myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
console.log(myArray);

/* output:
[ 'Hijau', 12.5, 17, true, 'Ngoding' ]
*/

Perbedaan array dengan object adalah data pada array disusun secara berurutan dan diakses menggunakan index. Untuk mengakses nilai di dalam array, kita gunakan tanda kurung siku [] yang di dalamnya berisi angka yang merupakan posisi nilai yang ingin diakses.

cara mengaksesnya 

console.log(myArray[1]);

/* output:
12.5
*/

kenapa 12.5 karena index dimulai dari 0

Jika kita mengakses nilai array lebih dari index-nya, maka hasilnya akan undefined 
Index terakhir array selalu jumlah nilai array - 1.

let myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
console.log(myArray[0]);
console.log(myArray[1]);
console.log(myArray[2]);
console.log(myArray[3]);
console.log(myArray[4]);
console.log(myArray[5]);
console.log("Panjang nilai myArray adalah " + myArray.length + ".");
/* output:
Hijau
12.5
17
true
Ngoding
undefined
Panjang nilai Myarray adalah 5.
*/


Menambahkan data ke dalam array dapat menggunakan push()
let myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.push('Javascript');
console.log(myArray);

/* output
[ 'Hijau', 12.5, 17, true, 'Ngoding', 'Javascript' ]
*/

untuk mengeluarkan data atau elemen terakhir dari array pop()

const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.pop();
console.log(myArray);

/* output
[ 'Hijau', 12.5, 17, true ]
*/

shift() dan unshift()
Metode shift() digunakan untuk mengeluarkan elemen pertama dari array, sementara unshift() digunakan untuk menambahkan elemen di awal array.
contoh
const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.shift();
myArray.unshift("Mangga");
console.log(myArray);

/* output
[ 'Mangga', 12.5, 17, true ]
*/

untuk menghapus data menggunakan delete
const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
delete.myArray[1];
console.log(myArray);

/* output
[ 'Hijau', <1 empty item>, 17, true , 'Ngoding']
*/

Untuk menghapus elemen, gunakan metode splice()

const myArray = ["Hijau", 12.5, 17, true, "Ngoding"];
myArray.splice(2, 1);   // Menghapus dari index 2 sebanyak 1 elemen
console.log(myArray);

/* output
[ 'Hijau', 17, true , 'Ngoding']
*/


Speard operator (es6)
Digunakan untuk menyebarkan nilai array atau lebih tepatnya iterable object menjadi beberapa elemen. Spread operator dituliskan dengan tiga titik (...).

const favorites = ["Seafood", "Salad", "Nugget", "Soup"];

console.log(...favorites);

/* output
Seafood Salad Nugget Soup
*/

penjelasan

console.log(...favorites);

Sama seperti kita menuliskan kode  ini

console.log(favorites[0], favorites[1], favorites[2], favorites[3]);

menggabungkan 2 nilai array 

const favorites = ["Seafood", "Salad", "Nugget", "Soup"];
const others = ["Cake", "Pie", "Donut"];

const allFavorites = [...favorites, ...others];

console.log(allFavorites);

/* output
[ 'Seafood', 'Salad', 'Nugget', 'Soup', 'Cake', 'Pie', 'Donut' ]
*/



Destructuring Object & Array

Destructuring dalam JavaScript merupakan sintaksis yang dapat mengeluarkan nilai dari array atau properties dari sebuah object ke dalam satuan yang lebih kecil.

Penulisan sintaksis destructuring object pada ES6 menggunakan object literal ({ }) di sisi kiri dari operator assignment.
cth1
const profile{
    namaDepan: "Michael",
    namaBelakang : "Jordan",
    umur : 55
}

const{namaDepan, namaBelakang, umur} = profile

console.log(namaDepan,namaBelakang,umur);
/* output:
Michael Jordan 55
*/

cth2
// menginisialisasi nilai baru melalui object destruction
({firstName, age} = profile);


const profile{
    namaDepan: "Michael",
    namaBelakang : "Jordan",
    umur : 55
}

let firstName = "Bambang";
let age = 20;

({namaDepan, umur} = profile);
console.log(namaDepan);
console.log(umur);

/* output:
Michael 
55
*/


Jika kita tidak menggunakan tanda kurung maka error

karena JavaScript mengira kita membuat block statement
// block statement tidak bisa berada pada sisi kiri assignment
{firstName, age} = profile;


Jika kita mendestruksikan objek dan menetapkan variabel dengan nama yang bukan merupakan properti dari objek, maka nilai dari variabel tersebut menjadi undefined. 


const profile{
    namaDepan: "Michael",
    namaBelakang : "Jordan",
    umur : 55
}

const {namaDepan, namaBelakang, umur, laki} = profile;
console.log(namaDepan);
console.log(umur);
console.log(laki);

/* output:
Michael 
55
undefined
*/

menambah nilai pada properti yg tidak adalah
const {firstName, age, laki = false} = profile;


kita bisa menggunakan penamaan variable lokal yg berbeda dengan properti objectnya dengan cara seperti berikut

const {firstName: localFirstName, lastName: localLastName, age: localAge} = profile;
cth kodingan
const profile{
    namaDepan: "Michael",
    namaBelakang : "Jordan",
    umur : 55
}

const {namaDepan: localFirstName, namaBelakang: localLastName, umur: localAge} = profile;
console.log(localFirstName);
console.log(localLastName);
console.log(localAge);
/* output:
Michael 
Jordan
55
*/

Destructuring Array
Destructuring array hampir sama dengan destructuring object. 
Object menggunakan tanda kurung kurawal { } sedangkan array menggunakan tanda kurung siku [ ]. Perbedaan lainnya adalah destructuring array bekerja berdasarkan posisi daripada penamaan propertinya.

const favorites = ["Indomie", "Burger", "Ketoprak", "hotdog"];
 
const [firstFood, secondFood, thirdFood, fourthFood] = favorites;
 
console.log(firstFood);
console.log(secondFood);
console.log(thirdFood);
console.log(fourthFood);
 
/* output:
Indomie
Burger
Ketoprak
hotdog
*/

Kita  bisa memilih nilai pada index tertentu untuk destrukturisasi pada array. 

const favorites = ["Indomie", "Burger", "Ketoprak", "hotdog"];
 
const [, , thirdFood] = favorites;
 
console.log(thirdFood);
 
/* output:
Ketoprak
*/


Destructuring Assignment

Kita  bisa melakukan destructuring assignment pada array. Namun, tidak seperti object, kita tidak perlu membungkusnya dengan tanda kurung.
cth 

const favorites = ["Indomie", "Burger", "Ketoprak", "hotdog"];

let myFood = "Es krim";
let herFood = "Sate";

[myFood, herFood] = favorites;
 
console.log(myFood);
console.log(herFood);
/* output:
Indomie
Burger
*/

contoh implementasi 
let a = 1;
let b= 2;
 
console.log("Sebelum swap");
console.log("Nilai a: " + a);
console.log("Nilai b: " + b);
 
[a, b] = [b, a]
 
console.log("Setelah swap");
console.log("Nilai a: " + a);
console.log("Nilai b: " + b);
 
/* output
Sebelum swap
Nilai a: 1
Nilai b: 2
Setelah swap
Nilai a: 2
Nilai b: 1
*/


Default Values = undefined
const favorites = ["Seafood"];
const [myFood, herFood] = favorites;
 
console.log(myFood);
console.log(herFood);
 
/* output:
Seafood
undefined
*/

menambahkan Default values 

const [myFood, herFood = "Salad"] = favorites;

Map
Map adalah tipe data yang menyimpan koleksi data dengan format key-value layaknya Object. Yang membedakan adalah Map memperbolehkan key dengan tipe data apa pun, dibandingkan Object yang hanya mengizinkan key bertipe String atau Symbol.



Untuk mendefinisikan Map gunakan constructor seperti ini:

const myMap = new Map();
Jika ingin memberikan nilai dari Map secara langsung , dapat menggunakan array multi dimensi

const myMap = new Map([
    ['1', 'a String key'],
    [1, 'a number key'],
    [true, true]
]);

console.log(myMap);

/* output
Map(3) { '1' => 'a String key', 1 => 'a number key', true => true }
*/

Ketika sudah membuat objek Map, kita bisa mendapatkan nilainya berdasarkan key tertentu dengan metode get(). Lalu, untuk menambahkan pasangan key-value baru gunakan metode set().

const capital = new Map([
    ["Jakarta", "Indonesia"],
    ["London", "England"],
    ["Tokyo", "Japan"]
]);

console.log(capital.size);
console.log(capital.get("London"));
capital.set("New Delhi", "India");
console.log(capital.size);
console.log(capital.get("New Delhi"));

/* output
3
England
4
India
 */


 Set
 Set  merupakan kumpulan nilai (set of values). Hal yang membedakan Set dengan struktur data yang lain adalah data pada Set tidak berurutan dan juga tidak diindeks. Data di dalam Set juga bersifat unik dan tidak ada duplikasi.


 const numberSet = new Set([1, 4, 6, 4, 1]);

console.log(numberSet);

/* output
Set(3) { 1, 4, 6 }
*/

kenapa 4, 1 tidak ada pada output? karena set secara otomatis membuang angkaa yang sama 

untuk menambahkan data bisa menggunakan fungsi add()

const numberSet = new Set([1, 4, 6, 4, 1]);
numberSet.add(5);
numberSet.add(10);
numberSet.add(6);

console.log(numberSet);

/* output
Set(5) { 1, 4, 6, 5, 10 }
*/


add() hanya menerima satu argumen
untuk menghapus data menggunakan delete() 
argumen yang dimasukkan ke dalam fungsi delete adalah nilai yang ingin dihapus, bukan index-nya.


const numberSet = new Set([1, 4, 6, 4, 1]);
numberSet.add(5);
numberSet.add(10);
numberSet.add(6);

numberSet.delete(4);

console.log(numberSet);

/* output
Set(4) { 1, 6, 5, 10 }
*/


WeakMap dan WeakSet
WeakMap merupakan varian dari Map yang mendukung garbage collection. Garbage collection adalah proses di mana interpreter JavaScript mengambil kembali memori yang tidak lagi “dapat dijangkau” dan tidak dapat digunakan oleh program. Garbage collection di JavaScript dilakukan secara otomatis dan bukan menjadi urusan dari developer.


WeakMap adalah referensi terhadap nilai yang disimpan. Apabila suatu nilai yang disimpan di WeakMap sudah tidak terjangkau atau tidak bisa lagi diakses, maka referensi ke memorinya akan dihapus.

hal yang membedakan antara Map dan WeakMap:

Key dari WeakMap harus berupa object atau array. Nilai primitif tidak bisa digunakan sebagai key karena tidak mendukung garbage collection.

WeakMap memiliki methodget(), set(), has(), dan delete(). Namun, WeakMap tidak termasuk kategori iterable sehingga tidak memiliki method keys(), values(), atau forEach().

WeakMap juga tidak memiliki property size. Ini karena ukuran WeakMap dapat berubah karena proses garbage collection.

Perbedaan
cth 1
let visitsCountMap = new Map(); // Menyimpan daftar user
 
function countUser(user) {
    let count = visitsCountMap.get(user) || 0;
    visitsCountMap.set(user, count + 1);
}
 
let jonas = { name: "Jonas" };
countUser(jonas);                // Menambahkan user "Jonas"
 
jonas = null;                    // Data object "Jonas" dihapus
 
console.log(visitsCountMap);
 
/* output
Map(1) { { name: 'Jonas' } => 1 }
*/

cth2

let visitsCountMap = new WeakMap(); // Menyimpan daftar user

function countUser(user) {
    let count = visitsCountMap.get(user) || 0;
    visitsCountMap.set(user, count + 1);
}

let jonas = { name: "Jonas" };
countUser(jonas);                // Menambahkan user "Jonas"

jonas = null;                    // Data object "Jonas" dihapus

console.log(visitsCountMap);

/* output
WeakMap { <items unknown> }
*/

WeakSet adalah versi weak reference dari Set. Perbedaan antara WeakSet dan Set antara lain:

WeakSet tidak bisa menyimpan nilai primitif.
WeakSet bukan iterable dan hanya memiliki method add(), has(), dan delete().
WeakSet tidak memiliki properti size.


Kodingan 
const restaurant = {
	name : "Hokben",
  	city : "Jakarta",
  	"favorite drink" : "Sprite",
  	"favorite food" : "Chiken rol",
  	isVegan : false,
}
const {name : name, "favorite drink" : favoriteDrink} = restaurant;

console.log(name);
console.log(favoriteDrink);

Jawaban quiz

let evenNumber = [];
	for (i = 1; i <= 100; i++){
      if(i % 2 === 0){
      	 evenNumber.push(i);
      }
    }

console.log(evenNumber);



const priceInJPY = 5000;

// TODO
	const currency = new Map([
            ["USD", 14000],
            ["JPY", 131],
            ["SGD", 11000],
            ["MYR", 3500]
        ]);

        const priceInIDR = (currency.get("JPY") * priceInJPY);

        console.log(`Jadi Nilai di Rupiah = Rp${priceInIDR}`);


Rangkuman 
Object adalah tipe data kompleks untuk menyimpan banyak data dengan format key-value. Key pada object harus berupa string.
Array digunakan untuk menyimpan banyak data. Data pada array disusun secara berurutan dan diakses menggunakan index.
Map menyimpan banyak data dengan format key-value seperti object. Namun, key pada Map dapat bertipe apa pun.
Set digunakan untuk menyimpan banyak data secara unik, tidak ada duplikasi, tidak berurutan, dan tidak diindeks.


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set
https://javascript.info/weakmap-weakset
https://javascript.info/garbage-collection